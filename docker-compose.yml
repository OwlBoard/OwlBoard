services:

  # --- BASES DE DATOS Y BROKERS ---

  mysql_db:
    image: mysql:8
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      # Script de inicialización para la BD de usuarios
      - ./User_Service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10

  mongo_db:
    image: mongo:6
    container_name: mongo_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27018:27017" # Puerto 27018 en el host
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "-u", "user", "-p", "password", "--authenticationDatabase", "admin"]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres_db:
    image: postgres:16-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: canvas_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Script de inicialización para la BD de canvas
      - ./Canvas_Service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d canvas_db"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis_db:
    image: redis:7-alpine
    container_name: redis_db
    restart: always
    command: redis-server --requirepass password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 10

  # --- BACKEND MICROSERVICES ---

  user_service:
    build:
      context: ./User_Service
    container_name: user_service
    restart: always
    depends_on:
      mysql_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: "mysql+pymysql://user:password@mysql_db/user_db"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/%2F"
      SERVICE_PORT: 8000

  comments_service:
    build:
      context: ./Comments_Service
    container_name: comments_service
    restart: always
    depends_on:
      mongo_db:
        condition: service_healthy
    environment:
      DATABASE_URL: "mongodb://user:password@mongo_db:27017/comments_db?authSource=admin"
      SERVICE_PORT: 8000

  canvas_service:
    build:
      context: ./Canvas_Service
    container_name: canvas_service
    restart: always
    depends_on:
      postgres_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgres://admin:admin@postgres_db:5432/canvas_db?sslmode=disable"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"

  chat_service:
    build:
      context: ./Chat_Service
    container_name: chat_service
    restart: always
    depends_on:
      redis_db:
        condition: service_healthy
    environment:
      REDIS_URL: "redis://:password@redis_db:6379/0"
      SERVICE_PORT: 8000

  # --- API GATEWAY ---
  owlboard-orchestrator: # <-- CORREGIDO
    build:
      context: ./owlboard-orchestrator # <-- CORREGIDO
    container_name: owlboard-orchestrator # <-- CORREGIDO
    restart: always
    ports:
      - "8080:80"
    depends_on:
      - user_service
      - comments_service
      - canvas_service
      - chat_service

  # --- FRONTEND SERVICES ---

  desktop_frontend:
    build:
      context: ./Desktop_Front_End
    container_name: desktop_frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - owlboard-orchestrator # <-- CORREGIDO
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:8080"
      API_GATEWAY_INTERNAL_URL: "http://owlboard-orchestrator" # <-- CORREGIDO

  mobile_frontend:
    build:
      context: ./Mobile_Front_End
    container_name: mobile_frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - owlboard-orchestrator # <-- CORREGIDO

# --- VOLÚMENES PERSISTENTES ---
volumes:
  mysql_data:
  mongo_data:
  postgres_data:
  redis_data:
